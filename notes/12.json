{"type":"doc","content":[{"type":"heading","attrs":{"level":1,"class":"pm-align--left"},"content":[{"type":"text","text":"DataTypes & Variables"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Variables are consisted of: type, name and value"}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"int Number = 5"}]},{"type":"heading","attrs":{"level":5,"class":"pm-align--left"},"content":[{"type":"text","text":"Data types"}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"sbyte // whole numbers from -128 to 127. In total 256 values. Single byte \nshort // whole numbers from -32767 to 32767\nint //whole numbers from -2'147'483'648 to 2'147'483'647\nlong //whole numbers from -9 trilion to 9 trilion\n\nfloat //floating point number. Allows decimal and 7-digits precision \ndouble //allows decimals and even higher range than the float. 15-digits precision\ndecimal //allows decimals and even higher range than the float. 28-digits precision\n\n// float is mostly used fore graphics libraries\n// double is mostly used for real world values\n// decimal is mostly sued for money calculations\n\nbool //only allows tro states: true / false\nchar //allows a single character literal or unicode ''\nstring //allows multiple lettters and unicodes \"\"\n\n"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"heading","attrs":{"level":5,"class":"pm-align--left"},"content":[{"type":"text","text":"Value type"}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Value type is a data type which holds the "},{"type":"text","marks":[{"type":"strong"}],"text":"value directly on its own memory space"}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"example: int, float, long, double, char, bool, decimal double etc."}]}]}]},{"type":"heading","attrs":{"level":6,"class":"pm-align--left"},"content":[{"type":"text","text":"Pictorial representation of Value type"}]},{"type":"paragraph","attrs":{"class":"pm-align--center"},"content":[{"type":"image","attrs":{"src":"https://www.tutlane.com/images/csharp/csharp_value_type_memory_allocation_example.png","alt":"C# Value Type and Reference Type with Examples - Tutlane","title":null}}]},{"type":"heading","attrs":{"level":5,"class":"pm-align--left"},"content":[{"type":"text","text":"Reference type in detail"}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Reference type is a variable type which instead of storing the value in memory directly, "},{"type":"text","marks":[{"type":"strong"}],"text":"stores the memory location"},{"type":"text","text":" of the actual data"}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"The variable here stores the memory reference of the data and not the data directly"}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Reference type data types are string, class, Array etc."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"When we copy this reference type of a data type it will just copy the memory address of the data so we will then have two variable pointing to the same data"}]}]}]},{"type":"heading","attrs":{"level":6,"class":"pm-align--left"},"content":[{"type":"text","text":"Pictorial representation of Reference type"}]},{"type":"paragraph","attrs":{"class":"pm-align--center"},"content":[{"type":"image","attrs":{"src":"https://www.tutorialsteacher.com/Content/images/csharp/raference-type-memory-allocation.png","alt":"Value Type and Reference Type","title":null}}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"Console Methods"}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Console.Write(“text\") - Prints and keeps the cursor on the "},{"type":"text","marks":[{"type":"strong"}],"text":"same line"}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Console.WriteLinde(“text“) - Prints and puts the cursos on the "},{"type":"text","marks":[{"type":"strong"}],"text":"next line"}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Console.Read() - Takes a single input of type string and "},{"type":"text","marks":[{"type":"strong"}],"text":"returns the ASCII value of that input"}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Console.ReadLine() - Takes a string or integer input and "},{"type":"text","marks":[{"type":"strong"}],"text":"returns it as the Output"}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Console.ReadKey() - Takes a single input of the type string and it "},{"type":"text","marks":[{"type":"strong"}],"text":"returns key info"}]}]}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"Converstion"}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"            //Explicit Converstion\n            double myDouble = 13.37;\n            int myInt;\n            // cast double to int\n            myInt = (int)myDouble;\n            //Implicit Converstion\n            int num = 21321321;\n            long bigNum = num;\n            float myFlaot = 13.321f;\n            double myNewDouble = myFlaot;\n            //Type converstion\n            string myString = myDouble.ToString();\n            bool sunIsShining = true;\n            string myBoolString = sunIsShining.ToString();\n"}]},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"Parsing a String to an Integer"}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"\n            int age = 31;\n            string name = \"Akosczuel\";\n\n            // 1. string concatenation\n            Console.WriteLine(\"String Concatetation\");\n            Console.WriteLine(\"Hello my name is \" + name + \"I am \" + age + \" years old\");\n\n            // 2. String formatting\n            //string formatting uses index\n            Console.WriteLine(\"String Formatting\");\n            Console.WriteLine(\"Hello my name is {0}, I am {1} years old\", name, age);\n\n            //3. String interpolation\n            //string Interpolation uses $ at the start which allow us to write our\n            //variables like this {variableName}\n            Console.WriteLine(\"String Interpolation\");\n            Console.WriteLine($\"Hello my name is {name}, I am {age} years old\");\n\n            //4. Verbatim strings.\n            //verbatim string start with @ and tells the compiler to take the string\n            //literally and ignore any spaces and escape characters like  \\n\n            Console.WriteLine(@\"C:\\users\\name\\documents\");\n            Console.WriteLine(\"C:\\users\\name\\documents\"); //doesnt work because of backslashes\n"}]},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"String methods"}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Substring(int32)"},{"type":"text","text":" - is used to get the Substring from the string, starting from the specified index."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"ToLower()"},{"type":"text","text":" - is used to convert the string to lowercase."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"ToUpper()"},{"type":"text","text":" - is used to convert the string to uppercase."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Trim()"},{"type":"text","text":" - is used to trim all leading and trailing white space from the string."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"IndexOf(string)"},{"type":"text","text":" - is used to get the first occurrence of the string or character inside the string."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"IsNullOrWhiteSpace"},{"type":"text","text":" - returns true if the string is either null or is blank else it returns false"}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"String.Format:"}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"String.Format - is used to insert the object or variable value inside any string"}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"With the String.Format we can replace the value in the specified format"}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Syntax: String.Format(“any string {index}“, name);"}]}]}]}]}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"            string firstName = \"Denis\";\n            string lastName = \"Panjuta\";\n            string fullName = string.Concat(\" \", firstName, lastName, \" \");\n            Console.WriteLine(firstName.Substring(2)); //output: \"nis\"\n            Console.WriteLine(firstName.ToLower()); //output: \"denis\"\n            Console.WriteLine(firstName.ToUpper()); //output: \"DENIS\"\n            Console.WriteLine(fullName.Trim()); //output: \"DenisPanjuta\" \n            Console.WriteLine(firstName.IndexOf('e')); //output: 1\n            Console.WriteLine(String.IsNullOrWhiteSpace(firstName)); //output: false\n            Console.WriteLine(fullName);\n            \n            //String Format\n            var name = \"Denis\":\n            String.Format(\"My name is {0}\", name): //output: \"My name is Denis\"\n            \n            Console.ReadKey();"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"Cheat sheets"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"https://cheatography.com/laurence/cheat-sheets/c/"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"https://www.thecodingguys.net/resources/cs-cheat-sheet.pdf"}]}]}