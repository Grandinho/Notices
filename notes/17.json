{"type":"doc","content":[{"type":"heading","attrs":{"level":1,"class":"pm-align--left"},"content":[{"type":"text","text":"Collections"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"heading","attrs":{"level":2,"class":"pm-align--left"},"content":[{"type":"text","text":"Array"}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Stores a fixed size sequential collection of elements"}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"ONLY of the same type"}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"all kinds of types: int, string, object, etc."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Great to store a collection of data - easier to think of a collection of variables of the same type stored at contiguous memory locations"}]}]}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"image","attrs":{"src":"https://www.simplilearn.com/ice9/free_resources_article_thumb/Vaibhav-Arrays%20Article/Arrays_in_ds-what-is-array-img1.PNG","alt":"Arrays in Data Structure: A Guide With Examples [Updated]","title":null}}]},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"Declaring & Initializing & Assignins values to an Array"}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"//datatype[] arrayName;\nint[] grades;\n\n//datatype[] arrayName = new dataType[amountOfEntries]\nint[] grades = new int[5];\n\n//Another way od initializing\nint[] grades = {32, 31, 324, 12, 23};\n\n//Third way od initializing\nint[] grades = new int[] {32, 45, 12, 32};\n//arrayName[index] = value;\ngrades[0] = 2;\ngrades[1] = 3;"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"Multi Dimensional Array"}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"//2D Array\nstring[,] board = {\n{\"1\",\"2\",\"3\"},\n{\"4\",\"5\",\"6\" },\n{\"7\",\"8\",\"9\" }\n};\n"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"Jagged Array"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Jagged array is an array within array"}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"//declare jagged array\nint[][] jaggedArray = new int[3][];\njaggedArray[0] = new int[5];\njaggedArray[1] = new int[3];\njaggedArray[2] = new int[8];\n//initzialiazing of jagged array\n//first way\njaggedArray[0] = new int[] { 2, 3, 4, 5, 7};\njaggedArray[1] = new int[] { 1, 2, 1 };\njaggedArray[2] = new int[] { 1, 2, 3, 4, 5, 6, 7, 8 };\n\n//anothert way\nint[][] jaggedArray2 = new int[][]\n{\n    new int[] { 2, 3, 4, 5, 7},\n    new int[] { 1, 2, 1 },\n    new int[] { 1, 2, 3, 4, 5, 6, 7, 8 }\n};\n\n//writing all jagged array elements\nfor (int i = 0; i < jaggedArray2.Length; i++)\n{\n    Console.WriteLine(\"Element {0}\", i);\n    for (int j = 0; j < jaggedArray2[i].Length; j++)\n    {\n        Console.WriteLine(jaggedArray2[i][j]);\n    }\n}\nConsole.ReadLine();\n"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"Params"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Params give us possibility to create methods which can take unlimited amount of inputs:"}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"        static void Main(string[] args)\n        {\n            ParamsExample(\"2\", \"3\", \"32131\");\n            Console.ReadLine();\n        }\n\n        public static void ParamsExample(params string[] sentence)\n        {\n            for (int i = 0; i < sentence.Length; i++)\n            {\n                Console.WriteLine(sentence[i]);\n            }\n        }\n"}]},{"type":"heading","attrs":{"level":2,"class":"pm-align--left"},"content":[{"type":"text","text":"Collections"}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Collections are classes that we can use to store a collection o objects."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Not limited to one type of objects"}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"No size constraints, It can grow in size as we add more elements"}]}]}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"heading","attrs":{"level":5,"class":"pm-align--left"},"content":[{"type":"text","text":"Why do we need Collections"}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"We use them to store, manage and manipulate groups of objects more efficiently"}]}]}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"heading","attrs":{"level":5,"class":"pm-align--left"},"content":[{"type":"text","text":"Types of Collections"}]},{"type":"heading","attrs":{"level":6,"class":"pm-align--left"},"content":[{"type":"text","text":"-Non-Generic"}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Can store any type of objects "}]}]}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"located in System.Collections namespace"}]}]}]},{"type":"heading","attrs":{"level":6,"class":"pm-align--left"},"content":[{"type":"text","text":"-Generic"}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"limited to one type of objects"}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Located in System.Collections.Generic namespace"}]}]}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"heading","attrs":{"level":3,"class":"pm-align--left"},"content":[{"type":"text","text":"Hashtables"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Hashtables are non-generic dictonaries with key pair value."}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":" static void Main(string[] args)\n        {\n            //Create hashtable\n            Hashtable studentsTable = new Hashtable();\n            \n            \n            Student stud1 = new Student(1, \"Maria\", 98);\n            Student stud2 = new Student(2, \"John\", 102);\n            Student stud3 = new Student(3, \"GigaChad\", 321);\n            Student stud4 = new Student(4, \"Dummy\", 12);\n            \n            //Add Key - Value to hash table\n            studentsTable.Add(stud1.Id, stud1);\n            studentsTable.Add(stud2.Id, stud2);\n            studentsTable.Add(stud3.Id, stud3);\n            studentsTable.Add(stud4.Id, stud4);\n            Student storedStudent1 = (Student)studentsTable[1];\n            \n            //retrieve all values from Hashtable\n            foreach (DictionaryEntry entry in studentsTable)\n            {\n                Student temp = (Student)entry.Value;\n                //Console.WriteLine(\"{0} {1} {2}\", temp.Id, temp.Name, temp.GPA);\n            }\n            foreach (Student value in studentsTable.Values)\n            {\n                //Console.WriteLine(\"{0} {1} {2}\", value.Id, value.Name, value.GPA);\n            }\n            Student[] students = new Student[5];\n            students[0] = new Student(1, \"Denis\", 32);\n            students[1] = new Student(2, \"ds\", 213);\n            students[2] = new Student(6, \"dsa\", 564);\n            students[3] = new Student(1, \"sdadsa\", 21);\n            students[4] = new Student(4, \"dsasdsa\", 321);\n            Hashtable studentsTable2 = new Hashtable();\n            foreach(Student entry in students)\n            {\n                if (studentsTable2.Contains(entry.Id))\n                {\n                    Console.WriteLine(\"Sorry, A student with the same ID already exists\");\n                    continue;\n                }\n                studentsTable2.Add(entry.Id, entry);\n            }\n            foreach (Student value in studentsTable2.Values)\n            {\n                Console.WriteLine(\"{0} {1} {2}\", value.Id, value.Name, value.GPA);\n            }\n            Console.ReadLine();\n        }\n    }\n    class Student\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public float GPA { get; set; }\n        public Student(int id, string name, float GPA)\n        {\n            this.Id = id;\n            this.Name = name;\n            this.GPA = GPA;\n        }\n"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"heading","attrs":{"level":3,"class":"pm-align--left"},"content":[{"type":"text","text":"Dictonary"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"In opposite to hashtables dictonaries are generic."}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}}]}