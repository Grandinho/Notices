{"type":"doc","content":[{"type":"heading","attrs":{"level":3,"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Functions / Methods"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"Method definition"}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"A methods is a code block that contains a series of statements. A programm causes the statements to be executed by calling the method and specifying any required methods arguments. In C#, every executed instruction is performed in the context of a method. The Main methods is the entry point for every C# application and it is called by the common language runtime (CLR) when the program is started."}]}]}]},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"Syntax"}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"<Access Specifier> <Return Type> <Method Name>(Parameter List)\n{\n    Method body\n}\n"}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Access Specifier "},{"type":"text","text":"- The Access Specifier determines the visibility of a variable or a method from another class."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Return Type "},{"type":"text","text":"- A method may return a value. The return type is the data type of the value the method returns. If the method is not returning any values, then the return type is void. "}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Method name "},{"type":"text","text":"- Method name is a unique identifier and it is case sensitive. It cannot be same as any other identifier declared in the class."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Parameter list "},{"type":"text","text":"- Enclosed between parentheses, the parameters are used to pass and receive data form a method. The parameter list refers to the type, order, and number of the parameter of a method. Parameter are optional; that is, a method may contain no parameters."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Method body "},{"type":"text","text":"- This contains the set of instructions needed to complete the required acitivity."}]}]}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Example:"}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"public int Add(int num1, int num2)\n{\n    int result = num1 + num2;\n    return result;\n}\n//OR\npublic int Add(int num1, int num2)\n{\n    return = num1 + num2;\n}"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"  "}]},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"Void Methods"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"Void methods are methods that doesnt return any value"}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"static void Main(string[] args)\n        {\n            WriteSomething();\n            WriteSomethingSpecific(\"Some message\");\n            Console.ReadLine();\n        }\n\n        //Access modifier (static) return type method name(params)\n        //Void method without parameters\n        public static void WriteSomething()\n        {\n            Console.WriteLine(\"I am called from a method\");\n\n        }\n\n        //Access modifier (static) return type method name(params)\n        //Voide method with parameters\n        public static void WriteSomethingSpecific(string _message)\n        {\n            Console.WriteLine(_message);\n        }"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"Method with return value "}]},{"type":"paragraph","attrs":{"class":"pm-align--left"}},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"        static void Main(string[] args)\n        {\n            Console.WriteLine(Add(32, 32));\n            Console.WriteLine(Multiply(32, 32));\n            Console.WriteLine(Divide(29, 3));\n            Console.ReadLine();\n            \n        }\n        //Method with integer return value that add up 2 numbers\n        public static int Add(int num1, int num2)\n        {\n            return num1 + num2;\n        }\n        //Method with integer return value that multiplies 2 numbers\n        public static int Multiply(int num1, int num2)\n        {\n            return num1 * num2;\n        }\n        //Method with double return value that divides 2 numbers\n        public static double Divide(double num1, double num2)\n        {\n            return num1 / num2;\n        }\n"}]},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"User Input"}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"        static void Main(string[] args)\n        {\n            Console.Write(\"Enter first number: \");\n            int num1 = Convert.ToInt32(Console.ReadLine());\n            Console.Write(\"Enter second number: \");\n            int num2 = Convert.ToInt32(Console.ReadLine());\n            Console.WriteLine(\"{0} + {1} = {2}\", num1, num2, Add(num1, num2));\n            Console.ReadLine();\n        }\n\n        public static int Add(int num1, int num2)\n        {\n            return num1 + num2;\n        }"}]},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"Try & Catch"}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","text":"\"Try\" and \"catch\" are keywords that represent the handling of exceptions due to data or coding errors during program execution."}]},{"type":"bullet_list","content":[{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Try"},{"type":"text","text":" - A try block is the block of code in which exceptions occur."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Catch"},{"type":"text","text":" - A catch block catches and handles try block exceptions."}]}]},{"type":"list_item","content":[{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Finally"},{"type":"text","text":" - A finally block is the block of code which is runned anyways"}]}]}]},{"type":"paragraph","attrs":{"class":"pm-align--left"},"content":[{"type":"text","marks":[{"type":"strong"}],"text":"Example:"}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"static void Main(string[] args)\n        {\n            Console.WriteLine(\"Please enter a number: \");\n            string userInput = Console.ReadLine();\n            \n            //Only works if user input  is Integer otherwise will crush\n            //int userInputAsInt = int.Parse(userInput);\n            try\n            {\n                int userInputAsInt = int.Parse(userInput);\n            }\n            catch (FormatException)\n            {\n                Console.WriteLine(\"Format exception, please enter the correct type next time\");\n            }\n            catch(OverflowException)\n            {\n                Console.WriteLine(\"Overflow Exception\");\n            }\n            catch(Exception)\n            {\n                Console.WriteLine(\"General Exception\");\n            }\n            finally\n            {\n                Console.WriteLine(\"This is called anyways\");\n            }\n\n            //Exercise divide by 0\n            int zero = 0;\n            int eight = 8;\n            int result;\n            try\n            {\n               result =  eight / zero;\n            }\n            catch(Exception)\n            {\n                Console.WriteLine(\"U cant divide by 0\");\n            }\n            Console.ReadLine();\n        }"}]},{"type":"heading","attrs":{"level":4,"class":"pm-align--left"},"content":[{"type":"text","text":"Operators"}]},{"type":"code_block","attrs":{"params":"cs","collapsed":false},"content":[{"type":"text","text":"        static void Main(string[] args)\n        {\n            int num1 = 5;\n            int num2 = 3;\n            int num3;\n\n            // unary operators\n\n            //multiplies number with -1\n            num3 = -num1;\n            Console.WriteLine(\"num3 is {0}\", num3);\n\n            bool isSunny = true;\n            // ! negates\n            Console.WriteLine(\"Is it sunny? {0}\", !isSunny);\n\n            // increment operators\n\n            int num = 0;\n\n            //post increment\n            //++ increments value by 1 i takes affect in next line\n            num++;\n\n            //pre increment\n            //++ increments value by 1 i takes affect in same line\n            ++num;\n\n            Console.WriteLine(\"num is {0}\", num);\n\n            //decrement operator\n\n            //post decrement\n            num--;\n\n            //pre decrement\n            --num;\n\n            Console.WriteLine(\"num is {0}\", num);\n\n\n            //modulo\n            //modulo divides num1 by num2 and result \n            int result;\n            result = num1 % num2;\n\n            //relational and type operators\n            bool isLowers;\n\n            //Check if num1 is lower than num2\n            isLowers = num1 < num2;\n\n            //equality operator\n            bool isEqual;\n\n            //Check if num1 is same as num2\n            isEqual = num1 == num2;\n\n            //Check if num1 is not same as num2\n            isEqual = num1 != num2;\n\n\n            //Conditional operators\n\n            bool isLowerAndSunny;\n\n            //And conditional\n            //checks if isLowers is true and isSunny is true\n            isLowerAndSunny = isLowers && isSunny;\n\n            //Or Conditional\n            //checks if isLowers is true or isSunny is true\n            isLowerAndSunny = isLowers || isSunny;\n\n\n            Console.ReadLine();\n        }"}]}]}